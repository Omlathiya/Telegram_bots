# This bot help to download youtube video in mp3 format and forward where you want without forwarded from tag
# This code has been generated by Om Lathiya


# line numbers for replace 
#                          Line : 19 Bot Token
#                          Line : 20 Channel Id

import os
import yt_dlp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, CallbackQueryHandler
)

# === CONFIGURATION ===
BOT_TOKEN = "<|Your bot token|>"
CHANNEL_ID = "<|Your channel id|>"  # Your private channel ID
ACCEPTED_USERS_FILE = "accepted_users.txt"

# === Load accepted users ===
def load_accepted_users():
    if not os.path.exists(ACCEPTED_USERS_FILE):
        return set()
    with open(ACCEPTED_USERS_FILE, "r") as f:
        return set(line.strip() for line in f)

def save_accepted_user(user_id):
    with open(ACCEPTED_USERS_FILE, "a") as f:
        f.write(f"{user_id}\n")

accepted_users = load_accepted_users()

# === Policy Text ===
policy_text = """
üìú Terms of Use:
1. This bot is for personal use only.
2. It downloads YouTube videos as MP3.
3. Do not misuse or violate YouTube's terms.

Do you accept the terms?
"""

keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚úÖ Accept", callback_data="accept"),
     InlineKeyboardButton("‚ùå Decline", callback_data="decline")]
])

# === /start command ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id in accepted_users:
        await update.message.reply_text("‚úÖ You‚Äôve already accepted the terms. Send a YouTube link.")
    else:
        await update.message.reply_text(policy_text, reply_markup=keyboard)

# === Policy accept/decline button handler ===
async def handle_policy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)

    if query.data == "accept":
        if user_id not in accepted_users:
            accepted_users.add(user_id)
            save_accepted_user(user_id)
            await query.edit_message_text("‚úÖ You accepted the terms. Now send a YouTube URL.")
        else:
            await query.edit_message_text("‚úÖ You‚Äôve already accepted the terms.")
    elif query.data == "decline":
        await query.edit_message_text("‚ùå You declined the terms. You can accept any time by sending /start.")
        await context.bot.send_message(chat_id=user_id, text=policy_text, reply_markup=keyboard)

# === Download Audio Function ===
async def download_audio(url: str, title_only=False):
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'downloads/%(title)s.%(ext)s',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'quiet': True,
        'noplaylist': True,
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=not title_only)
        title = info.get("title")
        duration = info.get("duration", 0)
        path = f"downloads/{title}.mp3"
        return title, path, duration

# === Message Handler ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    message = update.message

    if user_id not in accepted_users:
        await message.reply_text("‚ö†Ô∏è You must accept the policy to use the bot. Send /start.")
        return

    url = message.text.strip()
    await message.delete()

    # Notify user we're working on it
    status_msg = await context.bot.send_message(chat_id=message.chat_id, text="üîé Checking video details...")

    try:
        # Get info only first
        title, _, duration = await download_audio(url, title_only=True)
        minutes = duration // 60

        # Reject long videos (optional)
        if duration > 15 * 60:
            await status_msg.edit_text("‚ö†Ô∏è Video too long. Please send a video under 15 minutes.")
            return

        await status_msg.edit_text(f"üéµ Found: {title}\n‚è± Duration: {minutes} min\n‚è¨ Downloading MP3...")

        # Now download and convert to MP3
        _, file_path, _ = await download_audio(url)

        with open(file_path, 'rb') as f:
            await context.bot.send_audio(chat_id=message.chat_id, audio=f, title=title)
            f.seek(0)
            await context.bot.send_audio(chat_id=CHANNEL_ID, audio=f, title=title)

        os.remove(file_path)
        await status_msg.delete()
    except Exception as e:
        await status_msg.edit_text(f"‚ùå Error: {e}")

def main():
    os.makedirs("downloads", exist_ok=True)
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_policy))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
