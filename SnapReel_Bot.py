# This bot help to download a public reel in mp4 format and forward where you want without forwarded from tag
# This code has been generated by Om Lathiya


# line numbers for replace 
#                          Line : 19 Bot Token
#                          Line : 20 Channel Id

import os
import asyncio
import yt_dlp
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# Bot token and your channel username
TELEGRAM_BOT_TOKEN = '<|Your_Bot_Token|>'
CHANNEL_ID = "<|Channel Id or User name|>"

# Store accepted users (use database or file for persistent storage)
accepted_users = set()

# Privacy Policy and Terms
TERMS_TEXT = """üîí *Privacy Policy & Terms of Use*

üìå By using this bot, you agree to the following:

‚Ä¢ We do *not* store or share your data.
‚Ä¢ Only *public* Instagram Reel links are supported.
‚Ä¢ You are responsible for what you share.
‚Ä¢ We are *not affiliated* with Instagram or Telegram.

Press ‚úÖ *Accept* to continue, or ‚ùå *Decline* to exit."""

# Reel downloader using yt-dlp
def download_instagram_reel(url, filename='reel_video.mp4'):
    ydl_opts = {
        'outtmpl': filename,
        'format': 'bestvideo+bestaudio/best',
        'quiet': True,
        'merge_output_format': 'mp4'
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        return filename
    except Exception as e:
        print("‚ùå Download error:", e)
        return None

# /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ Accept", callback_data="accept")],
        [InlineKeyboardButton("‚ùå Decline", callback_data="decline")]
    ])
    await update.message.reply_markdown(TERMS_TEXT, reply_markup=keyboard)

# /help command
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""üìñ *How to use this bot:*
1. Send a public Instagram reel link.
2. Wait 10‚Äì15 seconds to receive the MP4 file.
3. If it fails, you‚Äôll get an error message.

üîê You must accept the terms before using the bot.""")

# Handle Accept/Decline buttons
async def handle_acceptance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == "accept":
        accepted_users.add(user_id)
        await query.edit_message_text("‚úÖ You‚Äôve accepted the terms! Now send a public Instagram Reel link.")
    elif query.data == "decline":
        await query.edit_message_text("‚ùå You declined the terms. Use /start again to continue later.")

# Handle reel download and repost
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id not in accepted_users:
        await update.message.reply_text("‚ö†Ô∏è You must accept the terms first. Use /start.")
        return

    url = update.message.text.strip()

    try:
        await update.message.delete()  # delete the user's URL message
    except Exception as e:
        print(f"‚ö†Ô∏è Could not delete message: {e}")

    if "instagram.com/reel/" in url:
        status_msg = await update.message.chat.send_message("‚è≥ Downloading video...")

        filename = "reel_video.mp4"
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(None, download_instagram_reel, url, filename)

        if result and os.path.exists(result):
            with open(result, 'rb') as video_file:
                # Send video to user
                await update.message.chat.send_video(video=video_file)

                # Send video to your channel (without forward tag)
                video_file.seek(0)  # Reset file pointer
                await context.bot.send_video(
                    chat_id=CHANNEL_ID,
                    video=video_file
                )

            await status_msg.delete()
            os.remove(filename)
        else:
            await status_msg.edit_text("‚ùå Could not download. Make sure the reel is public.")
    else:
        await update.message.chat.send_message("üìé Please send a valid Instagram Reel URL.")

# Main
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(handle_acceptance))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ Snap Reel Bot running...")
    app.run_polling()
